<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
				http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
				http://www.springframework.org/schema/context
				http://www.springframework.org/schema/context/spring-context-3.2.xsd
				http://www.springframework.org/schema/tx 
				http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
				http://www.springframework.org/schema/mvc
				http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	
	<context:annotation-config />
	
	<!-- 配置静态文件不需要经过后台 -->
	<mvc:resources location="/s/,classpath:/META-INF/s/" mapping="/s/**" cache-period="7776000" order="-1">
		<mvc:resource-chain resource-cache="true">
			<mvc:resolvers>
				<bean class="org.springframework.web.servlet.resource.GzipResourceResolver"/>
			</mvc:resolvers>
		</mvc:resource-chain>
	</mvc:resources>	
	<!-- 设置控制器读取的包 -->				
	<context:component-scan base-package="com.**.controller" use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>			
	<mvc:annotation-driven />
	
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes" >
            <value>
                json=application/json
                xml=application/xml
            </value>
        </property>
    </bean>
    
    <!-- page 信息 -->
    <mvc:annotation-driven conversion-service="conversionService" content-negotiation-manager="contentNegotiationManager">
		<mvc:argument-resolvers>
			<bean
				class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
		</mvc:argument-resolvers>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
				<property name="supportedMediaTypes">
					<list>
						<value>text/plain;charset=UTF-8</value>
					</list>
				</property>
			</bean>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<!-- a.ConversionService -->
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<bean class="com.rensframework.core.spring.ContainerComponentConverter" />
			</set>
		</property>
	</bean>

	<!-- b. The implementation uses a ConversionService in turn to convert the 
		source type into the domain class' id type which is then converted into a 
		domain class object by using a CrudRepository -->
	<bean
		class="org.springframework.data.repository.support.DomainClassConverter">
		<constructor-arg ref="conversionService" />
	</bean>
	
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
	
	<!-- 设置shirotags freemarker -->
	
	<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">  
		<property name="defaultEncoding" value="UTF-8" />
        
        <property name="freemarkerSettings">  
		    <props>  
		        <prop key="template_update_delay">0</prop>  
		        <prop key="default_encoding">UTF-8</prop>  
		        <prop key="number_format">0.##########</prop>  
		        <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>  
		        <prop key="classic_compatible">true</prop>  
		        <prop key="template_exception_handler">ignore</prop>
		        <prop key="auto_import">core/spring.ftl as spring, component.ftl as component</prop>
		    </props>
		</property>
        
        <property name="templateLoaderPaths">
        	<list> 
	            <value>/WEB-INF/ftl/</value>
	            <value>classpath:/META-INF/ftl/</value>
	            <!-- -->
            </list>
        </property>
        <!-- 当模板路径为多个时，加入此属性，否则报错，提示找不到templateLoaderPaths，ftl模板路径 -->
        <property name="preferFileSystemAccess" value="false" />
        
        <property name="freemarkerVariables">
        	<map>
        		<entry key="shiro" value-ref="shiroTags" />
        	</map>
        </property>
    </bean>
    <!-- lazy 解决方案 -->
    <mvc:interceptors>
    	<bean class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor">
    		<property name="entityManagerFactory" ref="entityManagerFactory" />
    	</bean>
    </mvc:interceptors>
    
    <!-- 视图解释器   -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">  
        <property name="viewClass"  
            value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"></property>  
	        <property name="prefix" value="" />  
	        <property name="suffix" value=".ftl" />  
        <property name="contentType" value="text/html;charset=utf-8" />  
        <property name="exposeRequestAttributes" value="true" />  
        <property name="exposeSessionAttributes" value="true" />  
        <property name="exposeSpringMacroHelpers" value="true" />  
        <!-- 这个配置后，在freemarker可以使用contextpath -->  
        <property name="requestContextAttribute" value="rc"></property>
    </bean>
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"  p:defaultEncoding="utf-8" />
    			
</beans>